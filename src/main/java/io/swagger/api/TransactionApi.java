/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.math.BigDecimal;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-05-05T07:37:10.859Z[GMT]")
@Api(value = "transaction", description = "the transaction API")
public interface TransactionApi {

    @ApiOperation(value = "deposit money into account", nickname = "deposit", notes = "deposit money into account", tags={ "customer","employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "deposit succesfull"),
        @ApiResponse(code = 400, message = "deposit failed") })
    @RequestMapping(value = "/transaction/deposit",
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> deposit(@ApiParam(value = "") @RequestParam(value="account", required=false)  String account
,@ApiParam(value = "") @RequestParam(value="amount", required=false)  BigDecimal amount
,@ApiParam(value = "") @RequestParam(value="userPerformingId", required=false)  Integer userPerformingId
);


    @ApiOperation(value = "Transaction from account to account", nickname = "transaction", notes = "Transaction from account to account|", tags={ "customer","employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Transaction done"),
        @ApiResponse(code = 400, message = "Transaction failed") })
    @RequestMapping(value = "/transaction",
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> transaction(@ApiParam(value = "") @RequestParam(value="timestamp", required=false)  String timestamp
,@ApiParam(value = "") @RequestParam(value="accountFrom", required=false)  String accountFrom
,@ApiParam(value = "") @RequestParam(value="accountTo", required=false)  String accountTo
,@ApiParam(value = "") @RequestParam(value="amount", required=false)  BigDecimal amount
,@ApiParam(value = "") @RequestParam(value="userPerformingId", required=false)  Integer userPerformingId
);


    @ApiOperation(value = "withdraw money from account", nickname = "withdraw", notes = "withdraw money from account", tags={ "customer","employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "withdraw succesfull"),
        @ApiResponse(code = 400, message = "withdraw failed") })
    @RequestMapping(value = "/transaction/withdraw",
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> withdraw(@ApiParam(value = "") @RequestParam(value="account", required=false)  String account
,@ApiParam(value = "") @RequestParam(value="amount", required=false)  BigDecimal amount
,@ApiParam(value = "") @RequestParam(value="userPerformingId", required=false)  Integer userPerformingId
);

}
